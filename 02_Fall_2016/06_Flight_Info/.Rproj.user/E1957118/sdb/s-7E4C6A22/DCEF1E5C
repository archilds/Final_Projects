{
    "contents" : "load(\"DCBCL_subgene_imputed.RData\")\n## data\nsubgene[1:3, 1:20]\n\n## training and testing only\nsel <- subgene[,2]==\"Training\"\nsubgene.tr <- subgene[sel,]\nsubgene.te <- subgene[!sel,]\n\ndim(subgene.tr)\ndim(subgene.te)\n\n################\n## use only training from now on\n################\nd <- subgene.tr\nlibrary(survival)\n\nqqnorm(d[,20])\n\n## univariate cox ph, \np.gene <- apply(d[,13:7411], 2, function(x) {\n  re <- summary(coxph(Surv(d[,3], d[,4]==\"Dead\")~x))\n  return(re$logtest[3])  #extracting the pvalue\n})\n\nlength(p.gene)\n\n## distribution of p values\nhist(-log10(p.gene))\n\nsum(p.gene<0.05)\n# type I error, expected rejections\nlength(p.gene)*0.05\n\n## Bonferroni \nsum(p.gene<0.05/7399)\n\n## FDR adjustment, corrected for multiple testing \np.gene.adj <- p.adjust(p.gene, \"BH\")\nhist(-log10(p.gene.adj))\nhist((p.gene.adj))\n\nplot(p.gene, p.gene.adj)\n\n## select top 100 genes anyway, 100 smallest p values\ngsel <- order(p.gene)[1:100]\n\n## reduced data\ndsel <- data.frame(d[,c(3,4,gsel+12)])\n\n## Cox PH model\nx <- as.matrix(dsel[,3:102])\npairs(x[,1:20])\nimage(cor(x))\nimage(0.5*log( (1+cor(x))/(1-cor(x))  ))\nsum(abs(cor(x))>0.8)-100\n\n\ncoxph(Surv(dsel[,1], dsel[,2]==\"Dead\")~x)\n\nfit1 <- coxph(Surv(dsel[,1]+0.01, dsel[,2]==\"Dead\")~x[,1:20]) #top 20\nfit2 <- coxph(Surv(dsel[,1]+0.01, dsel[,2]==\"Dead\")~x[,1:50]) #top 50\n## fit3 <- coxph(Surv(dsel[,1]+0.01, dsel[,2]==\"Dead\")~x[,1:100]) #top 100\n\n\n## ridge cox\nlibrary(glmnet)\n\ncoefficients(glmnet(x[,1:50], Surv(dsel[,1]+0.01, 1*(dsel[,2]==\"Dead\")), family=\"cox\", alpha=1e-6, lambda=0.1))\n\ncoefficients(glmnet(x[,1:50], Surv(dsel[,1]+0.01, 1*(dsel[,2]==\"Dead\")), family=\"cox\", alpha=1e-6, lambda=10))\n\ncv.fit <- cv.glmnet(x[,1:50], Surv(dsel[,1]+0.01, 1*(dsel[,2]==\"Dead\")), family=\"cox\", nfolds=5, alpha=1e-6)\nfit.ridge <- glmnet(x[,1:50], Surv(dsel[,1]+0.01, 1*(dsel[,2]==\"Dead\")), family=\"cox\", alpha=1e-6, lambda=cv.fit$lambda.min)\ncoefficients(fit.ridge)   # final estimate of beta based on CV\n\n## lasso cox\ncv.fit <- cv.glmnet(x[,1:50], Surv(dsel[,1]+0.01, 1*(dsel[,2]==\"Dead\")), family=\"cox\", nfolds=5, alpha=1)\nfit.lasso <- glmnet(x[,1:50], Surv(dsel[,1]+0.01, 1*(dsel[,2]==\"Dead\")), family=\"cox\", alpha=1, lambda=cv.fit$lambda.min)\ncoefficients(fit.lasso)\n\n## other choices of lambda:\n## coefficients(glmnet(x[,1:50], Surv(dsel[,1]+0.01, 1*(dsel[,2]==\"Dead\")), family=\"cox\", alpha=1e-6, lambda=10000))\n\n################\n##  Prediction performance\n################\nd.te <- data.frame(subgene.te[,c(3,4,gsel+12)])\nd.te[,1] <- d.te[,1]+0.01\n\nx.te <- matrix(as.numeric(unlist(subgene.te[,gsel+12])), ncol=100)\n\nmarker1 <- x.te[,1:20]%*%matrix(as.numeric(fit1$coefficients), ncol=1)\nmarker2 <- x.te[,1:50]%*%matrix(as.numeric(fit2$coefficients), ncol=1)\nmarker3 <- x.te[,1:50]%*%matrix(as.numeric(coefficients(fit.ridge)), ncol=1)\nmarker4 <- x.te[,1:50]%*%matrix(as.numeric(coefficients(fit.lasso)), ncol=1)\n\n## dimensional deduction\nfit5 <- coxph(Surv(subgene.tr[,3]+0.01, 1*(subgene.tr[,4]==\"Dead\"))~subgene.tr$Lymph.node.signature)\nmarker5 <- subgene.te$Lymph.node.signature*fit5$coefficients\n\n\ncv.fit <- cv.glmnet(x[,1:20], Surv(dsel[,1]+0.01, 1*(dsel[,2]==\"Dead\")), family=\"cox\", nfolds=5, alpha=1e-6)\nfit.ridge <- glmnet(x[,1:20], Surv(dsel[,1]+0.01, 1*(dsel[,2]==\"Dead\")), family=\"cox\", alpha=1e-6, lambda=cv.fit$lambda.min)\ncoefficients(fit.ridge)   # final estimate of beta based on CV\nmarker6 <- x.te[,1:20]%*%matrix(as.numeric(coefficients(fit.ridge)), ncol=1)\n\n## lasso cox\ncv.fit <- cv.glmnet(x[,1:20], Surv(dsel[,1]+0.01, 1*(dsel[,2]==\"Dead\")), family=\"cox\", nfolds=5, alpha=1)\nfit.lasso <- glmnet(x[,1:20], Surv(dsel[,1]+0.01, 1*(dsel[,2]==\"Dead\")), family=\"cox\", alpha=1, lambda=cv.fit$lambda.min)\ncoefficients(fit.lasso)\nmarker7 <- x.te[,1:20]%*%matrix(as.numeric(coefficients(fit.lasso)), ncol=1)\n\n## BIG lasso cox\nbigx <- matrix(unlist(subgene.tr[,13:ncol(subgene.tr)]), nrow=nrow(subgene.tr))\ncv.fit <- cv.glmnet(bigx, Surv(dsel[,1]+0.01, 1*(dsel[,2]==\"Dead\")), family=\"cox\", nfolds=5, alpha=0.95)\nfit.lasso <- glmnet(bigx, Surv(dsel[,1]+0.01, 1*(dsel[,2]==\"Dead\")), family=\"cox\", alpha=0.95, lambda=cv.fit$lambda.min)\nbigx.te <- matrix(unlist(subgene.te[,13:ncol(subgene.te)]), nrow=nrow(subgene.te))\nmarker8 <- bigx.te%*%matrix(as.numeric(coefficients(fit.lasso)), ncol=1)\n\n\nlibrary(survivalROC)\ntimes <- 1:12\n\nauc1 <- sapply(times, function(yy) survivalROC(d.te[,1], 1*(d.te[,2]==\"Dead\"), marker1, predict.time=yy, method=\"KM\")$AUC)\nauc2 <- sapply(times, function(yy) survivalROC(d.te[,1], 1*(d.te[,2]==\"Dead\"), marker2, predict.time=yy, method=\"KM\")$AUC)\nauc3 <- sapply(times, function(yy) survivalROC(d.te[,1], 1*(d.te[,2]==\"Dead\"), marker3, predict.time=yy, method=\"KM\")$AUC)\nauc4 <- sapply(times, function(yy) survivalROC(d.te[,1], 1*(d.te[,2]==\"Dead\"), marker4, predict.time=yy, method=\"KM\")$AUC)\nauc5 <- sapply(times, function(yy) survivalROC(d.te[,1], 1*(d.te[,2]==\"Dead\"), marker5, predict.time=yy, method=\"KM\")$AUC)\nauc6 <- sapply(times, function(yy) survivalROC(d.te[,1], 1*(d.te[,2]==\"Dead\"), marker6, predict.time=yy, method=\"KM\")$AUC)\nauc7 <- sapply(times, function(yy) survivalROC(d.te[,1], 1*(d.te[,2]==\"Dead\"), marker7, predict.time=yy, method=\"KM\")$AUC)\nauc8 <- sapply(times, function(yy) survivalROC(d.te[,1], 1*(d.te[,2]==\"Dead\"), marker8, predict.time=yy, method=\"KM\")$AUC)\n\nsource(\"~/Personal/Computing/MyFunctions/MyPlot.R\"); mytheme();\npostscript(file=\"TimeAUCCompare.eps\", height=mywid, width=mywid)\nplot(range(times), c(0,1), type=\"n\", xlab=\"Time\", ylab=\"AUC\")\nlines(times, auc1, lty=1, col=mycols[1], lwd=2)\nlines(times, auc2, lty=2, col=mycols[2], lwd=2)\nlines(times, auc3, lty=3, col=mycols[3], lwd=2)\nlines(times, auc4, lty=4, col=mycols[4], lwd=2)\nlines(times, auc5, lty=5, col=mycols[5], lwd=2)\nlines(times, auc6, lty=6, col=mycols[6], lwd=2)\nlines(times, auc7, lty=7, col=mycols[7], lwd=2)\nlegend(\"topright\", c(\"G20\", \"G50\", \"Ridge50\", \"Lasso50\", \"Sig\", \"Ridge20\", \"Lasso20\"), col=mycols, lty=1:7)\nabline(h=0.5)\ndev.off();\n\n\n\n\n################################################################\n## bad approach to assess prediction\nlibrary(survivalROC)\n\nbadAUC <- sapply(seq(10, 50, by=10), function(j) {\n  fit.bad <- coxph(Surv(dsel[,1]+0.01, dsel[,2]==\"Dead\")~x[,1:j])\n  m.bad <- x[,1:j]%*%matrix(as.numeric(coefficients(fit.bad)), ncol=1)\n  times <- 1:12\n  sapply(times, function(yy) survivalROC(dsel[,1], 1*(dsel[,2]==\"Dead\"), m.bad, predict.time=yy, method=\"KM\")$AUC)\n})\n\nmatplot(1:nrow(badAUC), badAUC, type=\"b\")\n################################################################\n\n\n\n\n\n################\n####  Likelihood\n################\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~offset(marker1))\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~offset(marker2))\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~offset(marker3))\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~offset(marker4))\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~offset(marker5))\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~offset(marker6))\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~offset(marker7))\n\n## an variant\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~(marker1))\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~(marker2))\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~(marker3))\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~(marker4))\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~(marker5))\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~(marker6))\ncoxph(Surv(d.te[,1], 1*(d.te[,2]==\"Dead\"))~(marker7))\n\n\n\n\n\nlibrary(ROCR)\ndd <- c(1,0,0,1,1)\npp <- c(0.3,0.7,0.1,0.8,0.9)\n\nmytheme()\npostscript(file=\"simpleROC.eps\", height=mywid, width=mywid)\npar(xaxs=\"r\",yaxs=\"r\")\nplot(performance(prediction(pp, dd), \"tpr\", \"fpr\"), color=T)\nabline(a=0,b=1)\ndev.off()\n\nperformance(prediction(pp, dd), \"auc\")\n\n\n\n\n\n\n",
    "created" : 1482092071159.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1687101374",
    "id" : "DCEF1E5C",
    "lastKnownWriteTime" : 1482091883,
    "path" : "~/Desktop/survival class/Utest/HighDimOut.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 11,
    "source_on_save" : false,
    "type" : "r_source"
}